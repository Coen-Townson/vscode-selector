#!/bin/bash

# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $# - 1))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ "$opt" = "" ]
            then
                continue
            fi
            if [ "$opt" = "Cancel" -o "$opt" = "Create New Workspace" ]
            then
                echo
            fi
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

# Read vscode workspace directory and add paths and names to list
function get_workspace_config {
    # If $VSCODE_WORKSPACES_PATH is undefined default to using $HOME/vscode-workspaces
    if [ !$VSCODE_WORKSPACES_PATH ]
    then
        VSCODE_WORKSPACES_PATH="$HOME/vscode-workspaces"
    fi

    if ls "$VSCODE_WORKSPACES_PATH" >/dev/null 2>&1
    then
        while read file
        do
            workspace_paths+=("$file")
            workspace_names+=("$(echo "$file" | sed 's/.*\/\([^/]*\)\.code-workspace$/\1/')")

        done <<<"$(find $VSCODE_WORKSPACES_PATH -name '*.code-workspace' | sort)"
    else
        echo "Could not find workspaces directory. Please check that $VSCODE_WORKSPACES_PATH exists."
        exit 1
    fi
}

# Create a basic workspace file
function create_workspace {
    # If $VSCODE_WORKSPACES_PATH is undefined default to using $HOME/vscode-workspaces
    if [ !$VSCODE_WORKSPACES_PATH ]
    then
        VSCODE_WORKSPACES_PATH="$HOME/vscode-workspaces"
    fi

    if ls "$VSCODE_WORKSPACES_PATH" >/dev/null 2>&1
    then
        echo -n "Workspace name: "
        read name
        echo -n "Workspace directory path: "
        read path
        # Expand ~/xxx to $HOME/xxx
        path="${path/#~/$HOME}"
        printf "{\n    \"folders\": [\n        {\n            \"path\": \"$path\"\n       }\n    ]\n}\n" > "$VSCODE_WORKSPACES_PATH/$name.code-workspace"
    else
        echo "Could not find workspaces directory. Please check that $VSCODE_WORKSPACES_PATH exists."
        exit 1
    fi
}

###### Main ######

# Read workspace files
workspace_names=()
workspace_paths=()
get_workspace_config
options=("${workspace_names[@]}" "Create New Workspace" "Cancel")

# Get user input
printf "Select workspace:\n\n\n"
select_option "${options[@]}"
choice=$?

# Process input - Possible addition, create a new workspace right from this menu
if [ "${options[$choice]}" = "Cancel" ]
then
    exit 0
elif [ "${options[$choice]}" = "Create New Workspace" ]
then
    create_workspace
else
    code ${workspace_paths[$choice]}
fi
